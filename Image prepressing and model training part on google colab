from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers

data_train_path = '/content/drive/MyDrive/potato/Training'
data_test_path = '/content/drive/MyDrive/potato/Testing'
data_val_path = '/content/drive/MyDrive/potato/Validation'
img_width = 256
img_height =256
data_train = tf.keras.utils.image_dataset_from_directory(
    data_train_path,
    shuffle=True,
    image_size=(img_width, img_height),
    batch_size=32,
    validation_split=False)
data_cat = data_train.class_names
data_cat
data_val = tf.keras.utils.image_dataset_from_directory(data_val_path,
                                                       image_size=(img_height,img_width),
                                                       batch_size=32,
                                                        shuffle=False,
                                                       validation_split=False)
data_test = tf.keras.utils.image_dataset_from_directory(
data_test_path,
    image_size=(img_height,img_width),
    shuffle=False,
    batch_size=32,
    validation_split=False
)
plt.figure(figsize=(10,10))
for image, labels in data_train.take(1):
    for i in range(9):
        plt.subplot(3,3,i+1)
        plt.imshow(image[i].numpy().astype('uint8'))
        plt.title(data_cat[labels[i]])
        plt.axis('off')
from tensorflow.keras.models import Sequential
data_train


input_shape = (img_height, img_width, 4)
model = Sequential([
    layers.Rescaling(1./255,input_shape = input_shape),
    layers.Conv2D(16, 3, padding='same', activation='relu'),
    layers.MaxPooling2D(),
    layers.Conv2D(32,3, padding='same',activation='relu'),
    layers.MaxPooling2D(),
    layers.Conv2D(64, 3, padding='same', activation='relu'),
    layers.MaxPooling2D(),
    layers.Flatten(),
    layers.Dropout(0.2),
    layers.Dense(128),
    layers.Dense(len(data_cat))

])

model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])


model.summary()

epochs_size = 25
history = model.fit(data_train, validation_data=data_val, epochs=epochs_size)
model.save('Image_classify.h5')

import tensorflow as tf

print("TensorFlow version:", tf.__version__)


model.save('/content/drive/MyDrive/Sudipto/potato/image_classify.h5')

epochs_range = range(epochs_size)
plt.figure(figsize=(8,8))
plt.subplot(1,2,1)
plt.plot(epochs_range,history.history['accuracy'],label = 'Training Accuracy')
plt.plot(epochs_range, history.history['val_accuracy'],label = 'Validation Accuracy')
plt.title('Accuracy')

plt.subplot(1,2,2)
plt.plot(epochs_range,history.history['loss'],label = 'Training Loss')
plt.plot(epochs_range, history.history['val_loss'],label = 'Validation Loss')
plt.title('Loss')
image = '../content/drive/MyDrive/potato/Training/Healthy/Healthy_1.jpg'
image = tf.keras.utils.load_img(image, target_size=(img_height,img_width))
img_arr = tf.keras.utils.array_to_img(image)
img_bat=tf.expand_dims(img_arr,0)
predict = model.predict(img_bat)
score = tf.nn.softmax(predict)
print('The Potato Leaf in image is {} with accuracy of {:0.2f}'.format(data_cat[np.argmax(score)],np.max(score)*100))
model.save('i.h5')

import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing import image


data_cat = ['EarlyBlight', 'Healthy', 'LateBlight', 'Invalid']

# Load the saved model
#model = tf.keras.models.load_model('../input/sunnit-atlast/Image_classify.h5')  # Replace with the correct path

# Path to the image
image_path = '../content/drive/MyDrive/potato/Training/Late_Blight/Late_Blight_1.jpg'

image = tf.keras.utils.load_img(image_path, target_size=(img_width,img_height))
img_arr = tf.keras.utils.array_to_img(image)
img_bat=tf.expand_dims(img_arr,0)
predict = model.predict(img_bat)
score = tf.nn.softmax(predict)
print('The Potato Leaf in image is {} with accuracy of {:0.2f}'.format(data_cat[np.argmax(score)],np.max(score)*100))
